в index.js 
1 строчка import библиотеки React
2 строчка import библиотека ReactDom
разница 
1 - отвечет за работу с реактом jsx и тд.
2 - позвоялет работать с Dom структурой на странице, позволяет вставлять библиотеку React и тот продукт который у нас полчается на страницу 

3 строчка import стилей index.css
так как у нас webpack он позволяет на прямую импортировать стили 

4 строчка import App - и это просто функция которую мы потом будем использовать

5 последяння строчка import библиотека webVitals - измеряет как быстро работает наше приложение
но ее можно удалить 

как работать

создадим переменную elem = <h2>Hello</h2> и поместим туда html структуру

и поместим эту переменную в root.render() и все наш заголовок на странице

Важное правило!

ReactDOM.render() - должна вызыватся только один раз на самом верхнем уровни нашего приложения, бывают исклюяение но почти всегда это так

а все остальные приложения мы будем собирать по отдельным файлам и заключать в такую функцию как App - главный лего конструктор который мы собирали по кусочкам и потом предостовляли странице для того что бы она показал нам это

Реакт может спокойно использоваться без jsx только на стандартных инстурментах js

выглядет так const elem = React.CreateElement('h2', {ClassName: класс}, 'hello world')

можно использовать переменную в которой строка Hello world
и что бы ие вставить ее в верстку нужно поместить ее в {} и сюда можно помещять массив методы или мете
матические действия кроме объектов, Реакт превращает вс е в строки ради безопастности а объект
нельзя превратить

классы и атрибуты в реакте отличаются немного 
класс в реакте пишется как classname

в теге label  атрибут не for а htmlFor

в button  не tab  а tabIndex

ИТОГИ
1)  при создание елемента помещать его нужно в () если их много
2) использовать корневой div для всей структуры
3)атрибуты отлечаются от html
4) можно спокойно вставлять значения во внутрь jsx в елементы или классы 